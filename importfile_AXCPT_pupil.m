function [trialtime_num, timeVec_pup_figure, average, time_end_dp] = importfile_AXCPT_pupil(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [SUBJECT,TRIAL,TRIALTIME,PUPILSIZECOMBINED_NORMALIZED] =
%   IMPORTFILE(FILENAME) Reads data from text file FILENAME for the default
%   selection.
%
%   [SUBJECT,TRIAL,TRIALTIME,PUPILSIZECOMBINED_NORMALIZED] =
%   IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Subject,Trial,TrialTime,PupilSizeCombined_Normalized] =
%   importfile('StandardAXCPT_EEG_Subject_3 BaselineCorrectedPupils.txt',2,
%   144891);
%
%    See also TEXTSCAN.
%
% Auto-generated by MATLAB on 2016/03/21 16:00:30

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%[^\n\r]';

%% Open the text file.% Be in the same directory with data
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
% dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
% for block=2:length(startRow)
%     frewind(fileID);
%     dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
%     %data = textscan(fid, formatSpec, 'Delimiter',delimiter, ...
%     %       'treatAsEmpty','NULL', 'EmptyValue',NaN);
%     
%     for col=1:length(dataArray)
%         dataArray{col} = [dataArray{col};dataArrayBlock{col}];
%     end
% end

%% Importing with Nans: Start
% Import the whole dataset in a cell format, in the same way it is stored
% in the filename. dataArray{}
% How to ignore NANs which here are denoted as 'NA', Solution:
%'delimiter',',N','MultipleDelimsAsOne',1,'TreatAsEmpty','AN'
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', ',N','MultipleDelimsAsOne',1,'TreatAsEmpty','A', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);

% Import now, and separate into single trials
%dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    % Put the start at the start of the open file
    frewind(fileID);
    %'delimiter',',N','MultipleDelimsAsOne',1,'TreatAsEmpty','AN'
    % The block=[] as the block=2:1, and then the result is []. We could 
    % as well omit the N parameter, (C=textscan(FID, 'FORMAT', N, 'Param',
    % Value) )
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', ',N','MultipleDelimsAsOne',1,'TreatAsEmpty','A', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);

    %dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray) % for col=1:length(dataArray), 1:5
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% importing with Nans End

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
Subject = dataArray{:, 1};
Trial = dataArray{:, 2};
TrialTime = dataArray{:, 3};
PupilSizeCombined_Normalized = dataArray{:, 4};

%% My program starts here, 23-March 2016
whole_array=zeros(300,7500*60/1000);  % (300 x 450) %We do not know the duration exactly
Trial_nums=unique(Trial);

for kk=1:length(Trial_nums)% number of trials
    trial_num=Trial_nums(kk);
    index_trial_temp=find(Trial==trial_num);
    
    % End_indicator is prefered time to end the trial is 7200 ms
    time_end_ms=7200; % ms from -700 to 6500
    time_end_dp=time_end_ms*60/1000; 
    % find(TrialTime(1:440)<7200,1,'last'); % It must be 432
    % I did not put to find it from TrialTime as it 
    
    trial_temp=PupilSizeCombined_Normalized(index_trial_temp);  %450
    trial_struct(trial_num).trials=trial_temp;
    clear index_trial_temp trial_num trial_temp
end

% Cut the trial to 432 dp (time_end_dp) - fill with NaNs

for kk=1:length(Trial_nums);
    trial_length=length(trial_struct(kk).trials);
    tempo= trial_struct(kk).trials;
    if trial_length<time_end_dp % 432
        diff_to_end=time_end_dp-trial_length;
        new_tempo=cat(1,tempo, NaN((diff_to_end+1),1));
        size(new_tempo);
        trial_struct(kk).fitted_trials=new_tempo(1:time_end_dp);
    else
        trial_struct(kk).fitted_trials=tempo(1:time_end_dp);
    end
    
end

% Make an array Num_trials x trialtime - change to Trialtime x num_trials
trialtime_num=zeros(time_end_dp, 300);
for kk=1:length(Trial_nums)
    trialtime_num(:,kk)=trial_struct(kk).fitted_trials;
end

%% Make the timeVec 
 % Sampling frequency for Pupillometry data
    fs_pup=60; 
    start_ind=1;
    end_ind=time_end_dp;
    %TrialTime(start_ind)
    %TrialTime(end_ind)
    timeVec_length=end_ind-start_ind;
    % trial is cut between -700 to 6500
    timeVec_pup_figure=-700:(1000/fs_pup):(6500-1/fs_pup);
%     timeVec_pup=TrialTime(start_ind):(1000/fs_pup):(TrialTime(end)-1/fs_pup);
%     timeVec=(1:length(average)).*1/fs_pup;
    
    
%% Make average 
average=nansum(trialtime_num,2)/size(trialtime_num,2);
figure; plot(timeVec_pup_figure, average);title(['Pupil data ' filename(19:28)]); 
xlabel('time (ms)');





